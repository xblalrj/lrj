{"entries":[{"timestamp":1760427076784,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":33,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":199,"length1":41,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":226,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"custom.ts","value":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1760427101611,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":109,"length1":83,"diffs":[[1,"        \"microphone\": \"*\"\n"]]}]}]},{"timestamp":1760429222903,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":189,"length1":39,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"\"\n"]]}]}]},{"timestamp":1760429799446,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":135,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":189,"length1":51,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"\" \n"]]}]}]},{"timestamp":1760429847989,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":308,"length1":46,"diffs":[[1,"     * @param n describe parameter here, eg: 5\n"]]}]}]},{"timestamp":1760430672096,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":308,"length1":48,"diffs":[[1,"     * @param n describe parameter here, eg: \n"]]}]}]},{"timestamp":1760430681975,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":277,"length1":41,"diffs":[[1,"        \"custom.ts\"\n"]]}]},{"type":"added","filename":"sadasd.ts","value":""}]},{"timestamp":1760431311203,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":0,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1760431311211,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":109,"length1":26,"diffs":[[1,"        \"microphone\": \"*\",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.16\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":0,"length1":34456,"diffs":[[1,"// 在此处添加您的代码\n"]]}]}]},{"timestamp":1760431892356,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1020,"length1":45,"diffs":[[1,"        //% blockId=\"left motor\" block=\"left\"\n"]]},{"start1":1082,"length1":46,"diffs":[[1,"        //% blockId=\"right motor\" block=\"right\"\n"]]},{"start1":1146,"length1":43,"diffs":[[1,"        //% blockId=\"all motor\" block=\"all\"\n"]]},{"start1":1238,"length1":37,"diffs":[[1,"        //% blockId=\"S1\" block=\"S1\"\n"]]},{"start1":1290,"length1":37,"diffs":[[1,"        //% blockId=\"S2\" block=\"S2\"\n"]]},{"start1":1370,"length1":36,"diffs":[[1,"        //% blockId=\"CW\" block=\"Forward\"\n"]]},{"start1":1429,"length1":37,"diffs":[[1,"        //% blockId=\"CCW\" block=\"Backward\"\n"]]},{"start1":1522,"length1":266,"diffs":[[1,"        //% blockId=\"patrolLeft\" block=\"left\"\n        PatrolLeft = 13,\n        //% blockId=\"patrolRight\" block=\"right\"\n        PatrolRight = 14\n"]]},{"start1":1699,"length1":207,"diffs":[[1,"        //% blockId=\"patrolLeft\" block=\"left\"\n        PatrolLeft = 0x10,\n"]]},{"start1":1820,"length1":22,"diffs":[[1,"        PatrolRight = 0x20\n"]]}]}]},{"timestamp":1760432490896,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1877,"length1":45,"diffs":[[1,"        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n"]]},{"start1":1946,"length1":45,"diffs":[[1,"        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n"]]},{"start1":2015,"length1":45,"diffs":[[1,"        //% blockId=\"patrolRight\" block=\"right\"\n"]]},{"start1":7099,"length1":54,"diffs":[[1,"    //% blockId=read_Patrol block=\"read |%patrol line tracking sensor\"\n"]]}]}]},{"timestamp":1760433010512,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1808,"length1":45,"diffs":[[1,"        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n"]]},{"start1":7150,"length1":0,"diffs":[[1,"    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n"]]},{"start1":7277,"length1":195,"diffs":[[1,"        if (patrol == Patrol.PatrolLeft) {\n            return pins.digitalReadPin(DigitalPin.P13)\n        } else if (patrol == Patrol.PatrolRight) {\n            return pins.digitalReadPin(DigitalPin.P14)\n"]]}]}]},{"timestamp":1760433587310,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":648,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":23,"diffs":[[1,""]]},{"start1":28,"length1":66,"diffs":[[1,"\t\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1554,"length1":21,"diffs":[[1,"        Patrolo1 = 0,\n"]]},{"start1":1621,"length1":20,"diffs":[[1,"        Patrolo2= 1,\n"]]},{"start1":1687,"length1":21,"diffs":[[1,"        Patrolo3 = 2,\n"]]},{"start1":1754,"length1":20,"diffs":[[1,"        Patrolo4 = 3\n"]]},{"start1":1922,"length1":24,"diffs":[[1,"        Patrol2 = 0x10,\n"]]},{"start1":1991,"length1":24,"diffs":[[1,"        Patrol3 = 0x10,\n"]]},{"start1":2060,"length1":23,"diffs":[[1,"        Patro4 = 0x20\n"]]},{"start1":7207,"length1":40,"diffs":[[1,"        if (patrol == Patrol.Patrol0) {\n"]]},{"start1":7402,"length1":202,"diffs":[[1,""]]}]}]},{"timestamp":1760434009967,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1760488197046,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":2603,"length1":44,"diffs":[[1,"    //% blockId=IR_read_version block=\"get product information\"\n"]]}]}]},{"timestamp":1760489683391,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":2603,"length1":46,"diffs":[[1,"    //% blockId=IR_read_version block=\"huo\"\n"]]}]}]},{"timestamp":1760489683545,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":2603,"length1":47,"diffs":[[1,"    //% blockId=IR_read_version block=\"huo'q\"\n"]]}]}]},{"timestamp":1760489986107,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1037,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"></block></statement></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"serial.redirectToUSB()\n"]]},{"start1":51,"length1":45,"diffs":[[1,"    serial.writeLine(\"\" + (tark.readPatrol(tark.Patrol.Patrol1)))\n"]]}]}]},{"timestamp":1760490407756,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760491744074,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1760491813862,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1325,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">Hello!</field></shadow><block type=\"IR_read_version\"></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"618\" y=\"220\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"30\" y=\"288\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"398\" y=\"510\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":28,"length1":40,"diffs":[[1,"    basic.showString(tark.IR_read_version())\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":3195,"length1":57,"diffs":[[1,"    //% blockId=ultrasonic_sensor block=\"read ultrasonic sensor in cm\"\n"]]},{"start1":4012,"length1":49,"diffs":[[1,"        pins.digitalWritePin(DigitalPin.P1, 1);\n"]]},{"start1":4083,"length1":210,"diffs":[[1,"        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n"]]},{"start1":4318,"length1":142,"diffs":[[1,"            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n"]]},{"start1":4476,"length1":106,"diffs":[[1,"            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n"]]},{"start1":4608,"length1":141,"diffs":[[1,"            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n"]]}]}]},{"timestamp":1760492017104,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1713,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"ultrasonic_sensor\"></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"618\" y=\"220\"></block><block type=\"IR_read_version\" disabled-reasons=\"pxt_automatic_disabled\" x=\"371\" y=\"259\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"30\" y=\"288\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"device_print_message\" disabled-reasons=\"pxt_automatic_disabled\" x=\"76\" y=\"292\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">Hello!</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"398\" y=\"510\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":28,"length1":53,"diffs":[[1,"    basic.showNumber(tark.Ultrasonic())\n"]]}]}]},{"timestamp":1760492574159,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1804,"length1":44,"diffs":[[1,"        //% blockId=\"patrol0\" block=\"巡线传感器1\"\n"]]}]}]},{"timestamp":1760494474306,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1804,"length1":45,"diffs":[[1,"        //% blockId=\"patrol\" block=\"巡线传感器1\"\n"]]}]}]},{"timestamp":1760494632798,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":443,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"34\" y=\"50\"><statement name=\"HANDLER\"><block type=\"motor_MotorRun\"><field name=\"index\">tark.Motors.All</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">131</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"></block><block type=\"device_show_number\" disabled-reasons=\"pxt_automatic_disabled\" x=\"646\" y=\"81\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"ultrasonic_sensor\" disabled-reasons=\"pxt_automatic_disabled\"></block></value></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"618\" y=\"220\"></block><block type=\"IR_read_version\" disabled-reasons=\"pxt_automatic_disabled\" x=\"371\" y=\"259\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"30\" y=\"288\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"device_print_message\" disabled-reasons=\"pxt_automatic_disabled\" x=\"76\" y=\"292\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">Hello!</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"398\" y=\"510\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":28,"length1":52,"diffs":[[1,"    tark.motorRun(tark.Motors.All, tark.Dir.CW, 131)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":1404,"length1":16,"diffs":[[1,"        CW = 0x0,\n"]]},{"start1":1459,"length1":16,"diffs":[[1,"        CCW = 0x1\n"]]},{"start1":5524,"length1":25,"diffs":[[1,"            buf[0] = 0x00;\n"]]},{"start1":5611,"length1":323,"diffs":[[1,"            pins.i2cWriteBuffer(0x10, buf);\n"]]}]}]},{"timestamp":1760495231361,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":506,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"motor_MotorRun\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">131</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":28,"length1":2,"diffs":[[1,"    tark.motorRun(tark.Motors.M1, tark.Dir.CW, 131)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":5636,"length1":115,"diffs":[[1,"                pins.digitalWritePin(DigitalPin.P16, 1);\n                pins.digitalWritePin(DigitalPin.P15, 0);\n"]]},{"start1":5800,"length1":115,"diffs":[[1,"                pins.digitalWritePin(DigitalPin.P15, 1);\n                pins.digitalWritePin(DigitalPin.P16, 0);\n"]]},{"start1":5964,"length1":25,"diffs":[[1,"            buf[0] = 0x02;\n"]]},{"start1":6051,"length1":325,"diffs":[[1,"            pins.i2cWriteBuffer(0x10, buf);\n"]]}]}]},{"timestamp":1760495895083,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":6386,"length1":51,"diffs":[[1,"        if (index == 2) {\n            buf[0] = 0x00;\n"]]},{"start1":6499,"length1":325,"diffs":[[1,"            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n"]]}]}]},{"timestamp":1760495911956,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":506,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"223\" y=\"259\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CCW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":6386,"length1":26,"diffs":[[1,"        if (index == 1) {\n"]]},{"start1":6643,"length1":115,"diffs":[[1,""]]},{"start1":6808,"length1":115,"diffs":[[1,""]]}]}]},{"timestamp":1760496510291,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1804,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"191\" y=\"211\"><field name=\"index\">tark.Motors.All</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":5636,"length1":61,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P16, buf[2]);\n                pins.analogWritePin(AnalogPin.P15, 0);\n"]]},{"start1":5861,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P16, 0);\n"]]},{"start1":6142,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P14, 0);\n"]]},{"start1":6307,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P13, 0);\n"]]},{"start1":6588,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P14, 0);\n"]]},{"start1":6703,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P15, 0);\n"]]},{"start1":6868,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P13, 0);\n"]]},{"start1":6983,"length1":0,"diffs":[[1,"                pins.analogWritePin(AnalogPin.P16, 0);\n"]]}]}]},{"timestamp":1760497080067,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":6735,"length1":55,"diffs":[[1,"    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n"]]},{"start1":6986,"length1":106,"diffs":[[1,"            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n"]]},{"start1":7142,"length1":106,"diffs":[[1,"            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n"]]},{"start1":7299,"length1":213,"diffs":[[1,"            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n"]]}]}]},{"timestamp":1760497779032,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1760497785515,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3099,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"243\" y=\"172\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"43\" y=\"185\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value><next><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block></next></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"390\" y=\"334\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":73,"diffs":[[1,""]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":7766,"length1":52,"diffs":[[1,"            return pins.digitalReadPin(DigitalPin.P0)\n"]]},{"start1":7867,"length1":52,"diffs":[[1,"            return pins.digitalReadPin(DigitalPin.P1)\n"]]},{"start1":7968,"length1":52,"diffs":[[1,"            return pins.digitalReadPin(DigitalPin.P2)\n"]]},{"start1":8069,"length1":52,"diffs":[[1,"            return pins.digitalReadPin(DigitalPin.P3)\n"]]}]}]},{"timestamp":1760498204469,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3445,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>"]]}]}]},{"timestamp":1760498411535,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3099,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"servo_ServoRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"200\" y=\"43\"><field name=\"index\">tark.Servos.S1</field><value name=\"angle\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"180\" label=\"Angle\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>"]]}]}]},{"timestamp":1760508734023,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760508734089,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3910,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":2202,"length1":4,"diffs":[[1,"    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n"]]},{"start1":2362,"length1":0,"diffs":[[1,"    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n"]]},{"start1":2531,"length1":0,"diffs":[[1,"\n"]]},{"start1":8171,"length1":0,"diffs":[[1,"    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n"]]},{"start1":8303,"length1":0,"diffs":[[1,"    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n"]]},{"start1":8983,"length1":59,"diffs":[[1,"    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n"]]},{"start1":9217,"length1":22,"diffs":[[1,"        let buf = pins.createBuffer(2);\n"]]},{"start1":9283,"length1":49,"diffs":[[1,"            buf[0] = 0x14;\n"]]},{"start1":9346,"length1":49,"diffs":[[1,"            buf[0] = 0x15;\n"]]},{"start1":9383,"length1":0,"diffs":[[1,"        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n"]]}]}]},{"timestamp":1760509257016,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3099,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"servo_ServoRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"193\" y=\"105\"><field name=\"index\">tark.Servos.S1</field><value name=\"angle\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"180\" label=\"Angle\" precision=\"0\"></mutation><field name=\"SLIDER\">126</field></shadow></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"device_set_servo_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"516\" y=\"176\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"180\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">180</field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":5202,"length1":24,"diffs":[[1,"            buf[0] = 16;\n"]]},{"start1":5539,"length1":24,"diffs":[[1,"            buf[0] = 16;\n"]]},{"start1":5875,"length1":24,"diffs":[[1,"            buf[0] = 16;\n"]]}]}]},{"timestamp":1760509642931,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3278,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>"]]}]}]},{"timestamp":1760509886883,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":8419,"length1":5,"diffs":[[1,"    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n"]]},{"start1":8835,"length1":0,"diffs":[[1,"    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n"]]},{"start1":9325,"length1":0,"diffs":[[1,"        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n"]]}]}]},{"timestamp":1760510498250,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":8419,"length1":0,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1760510502100,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"sadasd.ts","patch":[{"start1":8420,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1760510502819,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760511346401,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"tark.ltEvent(tark.Patrol1.Patrol1, tark.Voltage.High, function () {\n\t\n})\n"]]}]}]},{"timestamp":1760511347022,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1720,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"kb_event\" x=\"433\" y=\"330\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" disabled-reasons=\"pxt_automatic_disabled\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":4,"length1":18,"diffs":[[1," * @file pxt-maqueen/maqueen.ts\n"]]},{"start1":397,"length1":59,"diffs":[[1,"let maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\n"]]},{"start1":524,"length1":0,"diffs":[[1,"const MOTER_ADDRESSS = 0x10\n"]]},{"start1":756,"length1":75,"diffs":[[1,"//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n"]]},{"start1":2202,"length1":0,"diffs":[[1,"   \n"]]},{"start1":2208,"length1":0,"diffs":[[1,"\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n"]]},{"start1":8422,"length1":0,"diffs":[[1,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n"]]}]}]},{"timestamp":1760511904222,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":268,"length1":44,"diffs":[[1,""]]}]},{"type":"edited","filename":"sadasd.ts","patch":[{"start1":22,"length1":0,"diffs":[[1," * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n"]]},{"start1":204,"length1":21,"diffs":[[1," *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n"]]},{"start1":383,"length1":0,"diffs":[[1,"let cb: Action\nlet mycb: Action\nlet ne = \"1\"\nlet param = 0\n"]]},{"start1":1635,"length1":0,"diffs":[[1,"    export enum Patrol1 {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n"]]},{"start1":2064,"length1":0,"diffs":[[1,"\n"]]},{"start1":3872,"length1":51,"diffs":[[1,"     * Set the direction and speed of Maqueen motor.\n"]]},{"start1":5577,"length1":23,"diffs":[[1,"     * Stop the Maqueen motor.\n"]]},{"start1":7120,"length1":23,"diffs":[[1,"     * Set the Maqueen servos.\n"]]}]},{"type":"added","filename":"test.ts","value":"// 在此处测试；当此软件包作为插件使用时，将不会编译此软件包。\n"}]}],"snapshots":[{"timestamp":1760427076783,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1760429222899,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760431311203,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"20\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.16\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760433205233,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 0x1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrolo1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrolo2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrolo3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrolo4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x10,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x10,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patro4 = 0x20\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"get product information\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"read ultrasonic sensor in cm\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 1) {\n            buf[0] = 0x02;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 2) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (motors == 1) {\n            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.PatrolLeft) {\n            return pins.digitalReadPin(DigitalPin.P13)\n        } else if (patrol == Patrol.PatrolRight) {\n            return pins.digitalReadPin(DigitalPin.P14)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760488197046,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"></block></statement></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 0x1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol0\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"get product information\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"read ultrasonic sensor in cm\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 1) {\n            buf[0] = 0x02;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 2) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (motors == 1) {\n            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.digitalReadPin(DigitalPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.digitalReadPin(DigitalPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.digitalReadPin(DigitalPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.digitalReadPin(DigitalPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1760490322954,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"></block></statement></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block></xml>","main.ts":"serial.redirectToUSB()\nbasic.forever(function () {\n    serial.writeLine(\"\" + (tark.readPatrol(tark.Patrol.Patrol1)))\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 0x1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol0\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"read ultrasonic sensor in cm\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 1) {\n            buf[0] = 0x02;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 2) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (motors == 1) {\n            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.digitalReadPin(DigitalPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.digitalReadPin(DigitalPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.digitalReadPin(DigitalPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.digitalReadPin(DigitalPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760492539911,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"ultrasonic_sensor\"></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"618\" y=\"220\"></block><block type=\"IR_read_version\" disabled-reasons=\"pxt_automatic_disabled\" x=\"371\" y=\"259\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"30\" y=\"288\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"device_print_message\" disabled-reasons=\"pxt_automatic_disabled\" x=\"76\" y=\"292\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">Hello!</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"398\" y=\"510\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block></xml>","main.ts":"basic.forever(function () {\n    basic.showNumber(tark.Ultrasonic())\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 0x1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol0\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"以厘米为单位读取超声波传感器\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P12, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P12, 0);\n        if (pins.digitalReadPin(DigitalPin.P4) == 0) {\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 1) {\n            buf[0] = 0x02;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 2) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (motors == 1) {\n            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.digitalReadPin(DigitalPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.digitalReadPin(DigitalPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.digitalReadPin(DigitalPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.digitalReadPin(DigitalPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760494474306,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"34\" y=\"50\"><statement name=\"HANDLER\"><block type=\"motor_MotorRun\"><field name=\"index\">tark.Motors.All</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">131</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"368\" y=\"50\"></block><block type=\"device_show_number\" disabled-reasons=\"pxt_automatic_disabled\" x=\"646\" y=\"81\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"ultrasonic_sensor\" disabled-reasons=\"pxt_automatic_disabled\"></block></value></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"256\" y=\"182\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"618\" y=\"220\"></block><block type=\"IR_read_version\" disabled-reasons=\"pxt_automatic_disabled\" x=\"371\" y=\"259\"></block><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\" x=\"30\" y=\"288\"><field name=\"patrol\">tark.Patrol.Patrol1</field></block><block type=\"device_print_message\" disabled-reasons=\"pxt_automatic_disabled\" x=\"76\" y=\"292\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">Hello!</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"398\" y=\"510\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block></xml>","main.ts":"basic.forever(function () {\n    tark.motorRun(tark.Motors.All, tark.Dir.CW, 131)\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 0x1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol0\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"以厘米为单位读取超声波传感器\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P12, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P12, 0);\n        if (pins.digitalReadPin(DigitalPin.P4) == 0) {\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 1) {\n            buf[0] = 0x02;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (index == 2) {\n            buf[0] = 0x00;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (motors == 1) {\n            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.digitalReadPin(DigitalPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.digitalReadPin(DigitalPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.digitalReadPin(DigitalPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.digitalReadPin(DigitalPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760496315663,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"262\" y=\"402\"><field name=\"index\">tark.Motors.All</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"以厘米为单位读取超声波传感器\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P12, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P12, 0);\n        if (pins.digitalReadPin(DigitalPin.P4) == 0) {\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P16, buf[2]);\n                pins.analogWritePin(AnalogPin.P15, 0);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n                pins.analogWritePin(AnalogPin.P16, 0);\n            }\n        }\n        if (index == 1) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n                pins.analogWritePin(AnalogPin.P14, 0);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n                pins.analogWritePin(AnalogPin.P13, 0);\n            }\n        }\n        if (index == 2) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n                pins.analogWritePin(AnalogPin.P14, 0);\n                pins.analogWritePin(AnalogPin.P16, buf[2]);\n                pins.analogWritePin(AnalogPin.P15, 0);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n                pins.analogWritePin(AnalogPin.P13, 0);\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n                pins.analogWritePin(AnalogPin.P16, 0);\n            }\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n        if (motors == 1) {\n            buf[0] = 0x02;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = 0x00;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(0x10, buf);\n            buf[0] = 0x02;\n            pins.i2cWriteBuffer(0x10, buf);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.digitalReadPin(DigitalPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.digitalReadPin(DigitalPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.digitalReadPin(DigitalPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.digitalReadPin(DigitalPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760498131023,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"36\" y=\"55\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block></statement></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"440\" y=\"122\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"104\" y=\"211\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"></block></statement></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"418\" y=\"216\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"715\" y=\"203\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"330\" y=\"327\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"25\" y=\"464\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"440\" y=\"532\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"以厘米为单位读取超声波传感器\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P12, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P12, 0);\n        if (pins.digitalReadPin(DigitalPin.P4) == 0) {\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P16, buf[2]); \n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n            }\n        }\n        if (index == 1) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n            }\n        }\n        if (index == 2) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n                pins.analogWritePin(AnalogPin.P16, buf[2]);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n            }\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"电机 |%motors 停止\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            pins.digitalWritePin(DigitalPin.P15, 0);\n            pins.digitalWritePin(DigitalPin.P16, 0);\n        }\n        if (motors == 1) {\n            pins.digitalWritePin(DigitalPin.P14, 0);\n            pins.digitalWritePin(DigitalPin.P13, 0);\n        }\n\n        if (motors == 2) {\n            pins.digitalWritePin(DigitalPin.P15, 0);\n            pins.digitalWritePin(DigitalPin.P16, 0); \n            pins.digitalWritePin(DigitalPin.P14, 0);\n            pins.digitalWritePin(DigitalPin.P13, 0);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.analogReadPin(AnalogPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.analogReadPin(AnalogPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.analogReadPin(AnalogPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.analogReadPin(AnalogPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1760508734023,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"servo_ServoRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"200\" y=\"43\"><field name=\"index\">tark.Servos.S1</field><value name=\"angle\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"180\" label=\"Angle\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>","main.ts":"tark.ltEvent(tark.Patrol1.Patrol1, tark.Voltage.High, function () {\n\t\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum LED {\n        //% blockId=\"LEDLeft\" block=\"left\"\n        LEDLeft = 8,\n        //% blockId=\"LEDRight\" block=\"right\"\n        LEDRight = 12\n    }\n\n    export enum LEDswitch {\n        //% blockId=\"turnOn\" block=\"ON\"\n        turnOn = 0x01,\n        //% blockId=\"turnOff\" block=\"OFF\"\n        turnOff = 0x00\n    }\n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"以厘米为单位读取超声波传感器\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P12, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P12, 0);\n        if (pins.digitalReadPin(DigitalPin.P4) == 0) {\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P16, buf[2]); \n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n            }\n        }\n        if (index == 1) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n            }\n        }\n        if (index == 2) {\n            buf[0] = 16;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n                pins.analogWritePin(AnalogPin.P16, buf[2]);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n            }\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"电机 |%motors 停止\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            pins.digitalWritePin(DigitalPin.P15, 0);\n            pins.digitalWritePin(DigitalPin.P16, 0);\n        }\n        if (motors == 1) {\n            pins.digitalWritePin(DigitalPin.P14, 0);\n            pins.digitalWritePin(DigitalPin.P13, 0);\n        }\n\n        if (motors == 2) {\n            pins.digitalWritePin(DigitalPin.P15, 0);\n            pins.digitalWritePin(DigitalPin.P16, 0); \n            pins.digitalWritePin(DigitalPin.P14, 0);\n            pins.digitalWritePin(DigitalPin.P13, 0);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.analogReadPin(AnalogPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.analogReadPin(AnalogPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.analogReadPin(AnalogPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.analogReadPin(AnalogPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n    /**\n     * Turn on/off the LEDs.\n     * @param led The LED to operate\n     * @param ledswitch The operation to perform\n     */\n\n    //% weight=20\n    //% blockId=writeLED block=\"LEDlight |%led turn |%ledswitch\"\n    //% led.fieldEditor=\"gridpicker\" led.fieldOptions.columns=2\n    //% ledswitch.fieldEditor=\"gridpicker\" ledswitch.fieldOptions.columns=2\n    export function writeLED(led: LED, ledswitch: LEDswitch): void {\n        if (led == LED.LEDLeft) {\n            pins.digitalWritePin(DigitalPin.P8, ledswitch)\n        } else if (led == LED.LEDRight) {\n            pins.digitalWritePin(DigitalPin.P12, ledswitch)\n        } else {\n            return\n        }\n    }\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = 0x14;\n        }\n        if (index == 1) {\n            buf[0] = 0x15;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(0x10, buf);\n    }\n\n    /**\n    * Line tracking sensor event function\n    * @param value Sensor\n    * @param vi Voltage\n    */\n    //% weight=2\n    //% blockId=kb_event block=\"on|%value line tracking sensor|%vi\"\n    export function ltEvent(value: Patrol1, vi: Voltage, a: Action) {\n        let state = value + vi;\n        serial.writeNumber(state)\n        let item: KV = { key: state, action: a };\n        kbCallback.push(item);\n    }\n\n    let x: number\n    let i: number = 1;\n    function patorlState(): number {\n        switch (i) {\n            case 1: x = pins.digitalReadPin(DigitalPin.P13) == 0 ? 0x10 : 0; break;\n            case 2: x = pins.digitalReadPin(DigitalPin.P13) == 1 ? 0x11 : 0; break;\n            case 3: x = pins.digitalReadPin(DigitalPin.P14) == 0 ? 0x20 : 0; break;\n            default: x = pins.digitalReadPin(DigitalPin.P14) == 1 ? 0x21 : 0; break;\n        }\n        i += 1;\n        if (i == 5) i = 1;\n\n        return x;\n    }\n\n    basic.forever(() => {\n        if (kbCallback != null) {\n            let sta = patorlState();\n            if (sta != 0) {\n                for (let item of kbCallback) {\n                    if (item.key == sta) {\n                        item.action();\n                    }\n                }\n            }\n        }\n        basic.pause(50);\n    })\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760511346401,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"67\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block><block type=\"pxt-on-start\" x=\"68\" y=\"156\"></block><block type=\"serial_writenumber\" disabled-reasons=\"pxt_automatic_disabled\" x=\"382\" y=\"161\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"679\" y=\"148\"><value name=\"text\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\"></field></shadow></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"294\" y=\"272\"><field name=\"index\">tark.Motors.M2</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block><block type=\"kb_event\" x=\"433\" y=\"330\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"178\" y=\"378\"></block><block type=\"device_set_analog_pin\" disabled-reasons=\"pxt_automatic_disabled\" x=\"-11\" y=\"409\"><value name=\"name\"><shadow type=\"analog_pin_shadow\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"pin\">AnalogPin.P16</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"1023\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1023</field></shadow></value></block><block type=\"serial_writeline\" disabled-reasons=\"pxt_automatic_disabled\" x=\"284\" y=\"480\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"read_Patrol\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"patrol\">tark.Patrol.Patrol4</field></block></value></block><block type=\"motor_MotorRun\" disabled-reasons=\"pxt_automatic_disabled\" x=\"404\" y=\"477\"><field name=\"index\">tark.Motors.M1</field><field name=\"Dir\">tark.Dir.CW</field><value name=\"speed\"><shadow type=\"math_number_minmax\" disabled-reasons=\"pxt_automatic_disabled\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">19</field></shadow></value></block><block type=\"kb_event\" disabled-reasons=\"pxt_automatic_disabled\" x=\"5\" y=\"563\"><field name=\"value\">tark.Patrol1.Patrol1</field><field name=\"vi\">tark.Voltage.High</field></block></xml>","main.ts":"tark.ltEvent(tark.Patrol1.Patrol1, tark.Voltage.High, function () {\n\t\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"TARK\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 10\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","sadasd.ts":"/**\n * @file pxt-maqueen/maqueen.ts\n * @brief DFRobot's maqueen makecode library.\n * @n [Get the module here](https://www.dfrobot.com.cn/goods-1802.html)\n * @n This is a MakeCode graphical programming education robot.\n *\n * @copyright    [DFRobot](http://www.dfrobot.com), 2016\n * @copyright    MIT Lesser General Public License\n *\n * @author [email](jie.tang@dfrobot.com)\n * @date  2019-10-08\n*/\nlet maqueencb: Action\nlet maqueenmycb: Action\nlet maqueene = \"1\"\nlet maqueenparam = 0\nlet alreadyInit = 0\nlet IrPressEvent = 0\nconst MOTER_ADDRESSS = 0x10\n\nenum PingUnit {\n    //% block=\"厘米\"\n    Centimeters,\n}\nenum state {\n    state1 = 0x10,\n    state2 = 0x11,\n    state3 = 0x20,\n    state4 = 0x21\n}\ninterface KV {\n    key: state;\n    action: Action;\n}\n\n\n//%\n//% weight=100 color=#008B00 icon=\"\\uf136\" block=\"sadasda\"\n//% groups=['Maqueen_v4','Maqueen_v5']\nnamespace tark {\n    let kbCallback: KV[] = []\n    export class Packeta {\n        public mye: string;\n        public myparam: number;\n    }\n\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"左电机\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"右电机\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"全部\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"舵机1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"舵机2\"\n        S2 = 1\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"正向\"\n        CW = 0,\n        //% blockId=\"CCW\" block=\"逆向\"\n        CCW = 1\n    }\n\n    export enum Patrol {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2= 1,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 2,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 3\n    }\n\n    export enum Patrol1 {\n        //% blockId=\"patrol1\" block=\"巡线传感器1\"\n        Patrol1 = 0x10,\n        //% blockId=\"patrol2\" block=\"巡线传感器2\"\n        Patrol2 = 0x20,\n        //% blockId=\"patrol3\" block=\"巡线传感器3\"\n        Patrol3 = 0x40,\n        //% blockId=\"patrol4\" block=\"巡线传感器4\"\n        Patrol4 = 0x80\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n   \n\n\n\n\n\n\n\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=10\n    //% blockId=IR_read_version block=\"获取产品信息\"\n    export function IR_read_version(): string {\n        pins.i2cWriteNumber(0x10, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(0x10, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(0x10, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(0x10, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n    /**\n     * Read ultrasonic sensor.\n     */\n\n    //% blockId=ultrasonic_sensor block=\"以厘米为单位读取超声波传感器\"\n    //% weight=95\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P12, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P12, 0);\n        if (pins.digitalReadPin(DigitalPin.P4) == 0) {\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P4, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Set the direction and speed of Maqueen motor.\n     * @param index Motor to run\n     * @param direction Wheel direction\n     * @param speed Wheel speed\n     */\n\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = 0;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P16, buf[2]); \n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n            }\n        }\n        if (index == 1) {\n            buf[0] = 0;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n            }\n        }\n        if (index == 2) {\n            buf[0] = 0;\n            buf[1] = direction;\n            buf[2] = speed;\n            if (buf[1] == 0) {\n                pins.analogWritePin(AnalogPin.P13, buf[2]);\n                pins.analogWritePin(AnalogPin.P16, buf[2]);\n            }\n            else if (buf[1] == 1) {\n                pins.analogWritePin(AnalogPin.P14, buf[2]);\n                pins.analogWritePin(AnalogPin.P15, buf[2]);\n            }\n        }\n    }\n\n    /**\n     * Stop the Maqueen motor.\n     * @param motors The motor to stop\n     */\n\n    //% weight=20\n    //% blockId=motor_motorStop block=\"电机 |%motors 停止\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            pins.digitalWritePin(DigitalPin.P15, 0);\n            pins.digitalWritePin(DigitalPin.P16, 0);\n        }\n        if (motors == 1) {\n            pins.digitalWritePin(DigitalPin.P14, 0);\n            pins.digitalWritePin(DigitalPin.P13, 0);\n        }\n\n        if (motors == 2) {\n            pins.digitalWritePin(DigitalPin.P15, 0);\n            pins.digitalWritePin(DigitalPin.P16, 0); \n            pins.digitalWritePin(DigitalPin.P14, 0);\n            pins.digitalWritePin(DigitalPin.P13, 0);\n        }\n\n    }\n\n    /**\n     * Read line tracking sensor.\n     * @param patrol The patrol sensor to read\n     */\n\n    //% weight=20\n    //% blockId=read_Patrol block=\"读取 |%patrol 巡线传感器\"\n    export function readPatrol(patrol: Patrol): number {\n        if (patrol == Patrol.Patrol1) {\n            return pins.analogReadPin(AnalogPin.P0)\n        } else if (patrol == Patrol.Patrol2) {\n            return pins.analogReadPin(AnalogPin.P1)\n        } else if (patrol == Patrol.Patrol3) {\n            return pins.analogReadPin(AnalogPin.P2)\n        } else if (patrol == Patrol.Patrol4) {\n            return pins.analogReadPin(AnalogPin.P3)\n        } else {\n            return -1\n        }\n    }\n\n\n\n    /**\n     * Set the Maqueen servos.\n     * @param index Servo channel\n     * @param angle Servo angle; eg: 90\n     */\n\n    //% weight=90\n    //% blockId=servo_ServoRun block=\"舵机|%index|角度|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    export function servoRun(index: Servos, angle: number): void {\n        let an=angle;\n        if (index == 0) {\n            pins.servoWritePin(AnalogPin.P8, an)\n        }\n        if (index == 1) {\n            pins.servoWritePin(AnalogPin.P9, an)\n        }\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*''''''''''''''''''''''''''''''''''    maqueen V5  ''''''''''''''''''''''''''''''''''''''''''''''''''*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//% group=\"Maqueen_v5\"\n//% weight=100 color=#0fbc11 icon=\"\\uf48b\" block=\"Maqueen v5\"\nnamespace Maqueen_V5 {\n    let neopixel_buf = pins.createBuffer(16 * 3);\n    for (let i = 0; i < 16 * 3; i++) {\n        neopixel_buf[i] = 0\n    }\n    let _brightness = 255\n\n    interface KV1 {\n        key: number;\n        key1: number;\n        action: Action;\n    }\n\n    let kbCallback1: KV1[] = [];\n    let kbCallback2: KV[] = [];\n    const I2CADDR = 0x10;\n    let servo1_num: number = 20;\n    let servo2_num: number = 20;\n    export enum Patrolling {\n        //% block=\"ON\"\n        ON = 1,\n        //% block=\"OFF\"\n        OFF = 2,\n    }\n    export enum PatrolSpeed {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n    }\n    export enum Motors {\n        //% blockId=\"left motor\" block=\"left\"\n        M1 = 0,\n        //% blockId=\"right motor\" block=\"right\"\n        M2 = 1,\n        //% blockId=\"all motor\" block=\"all\"\n        All = 2\n    }\n\n    export enum Servos {\n        //% blockId=\"S1\" block=\"S1\"\n        S1 = 0,\n        //% blockId=\"S2\" block=\"S2\"\n        S2 = 1\n    }\n    export enum Patrol {\n        //% blockId=\"patrolLeft\" block=\"L\"\n        L = 1,\n        //% blockId=\"patrolMiddle\" block=\"M\"\n        M = 2,\n        //% blockId=\"patrolRight\" block=\"R\"\n        R = 3\n    }\n    export enum SpeedGrade {\n        //% block=\"1\"\n        speed1 = 1,\n        //% block=\"2\"\n        speed2 = 2,\n        //% block=\"3\"\n        speed3 = 3,\n        //% block=\"4\"\n        speed4 = 4,\n        //% block=\"5\"\n        speed5 = 5\n    }\n\n    export enum Dir {\n        //% blockId=\"CW\" block=\"Forward\"\n        CW = 0x0,\n        //% blockId=\"CCW\" block=\"Backward\"\n        CCW = 0x1\n    }\n    export enum Voltage {\n        //%block=\"high\"\n        High = 0x01,\n        //% block=\"low\"\n        Low = 0x00\n    }\n\n    export enum DirectionType {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n        //% block=\"all led light\"\n        All = 2,\n    }\n\n    export enum DirectionType2 {\n        //% block=\"left led light\"\n        Left = 0,\n        //% block=\"right led light\"\n        Right = 1,\n    }\n    export enum BatteryType {\n        //% block=\"Alkaline battery\"\n        Alkaline = 1,\n        //% block=\"Lithium battery\"\n        Lithium = 0,\n    }\n\n    /**\n     * Well known colors\n     */\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n    export enum CarLightColors {\n        //% block=red\n        Red = 1,\n        //% block=green\n        Green = 2,\n        //% block=yellow\n        Yellow = 3,\n        //% block=blue\n        Blue = 4,\n        //% block=purple\n        Purple = 5,\n        //% block=cyan\n        Cyan = 6,\n        //% block=white\n        White = 7,\n        //% block=black\n        Black = 8\n    }\n    export const enum BleCmd {\n        //% block=\"Go forward\"\n        BleForward = 1,         /**< advance */\n        //% block=\"Go backward\"\n        BleBackward = 2,         /**< astern */\n        //% block=\"Turn left\"\n        BleLeft = 3,             /**< turn left */\n        //% block=\"Turn right\"\n        BleRight = 4,           /**< turn right */\n        //% block=\"RGB red\"\n        BleRgbR = 5,           /**< Red */\n        //% block=\"RGB green\"\n        BleRgbG = 6,            /**< Green */\n        //% block=\"RGB blue\"\n        BleRgbB = 7,           /**< Blue */\n        //% block=\"RGB purple\"\n        BleRgbRB = 8,          /**< Purple */\n        //% block=\"RGB yellow\"\n        BleRgbRG = 9,          /**< Yellow */\n        //% block=\"RGB cyan\"\n        BleRgbGB = 10,         /**< Cyan */\n        //% block=\"RGB white\"\n        BleRgbRGB = 11,        /**< White */\n        //% block=\"RGB OFF\"\n        BleRgbOff = 12,        /**< Off */\n        //% block=\"Turn servo1 right\"\n        BleServo1Right = 13,   /**< servo1 turn right */\n        //% block=\"Turn servo1 left\"\n        BleServo1Left = 14,     /**< servo1 turn left */\n        //% block=\"Turn servo2 right\"\n        BleServo2Right = 15,    /**< servo2 turn right */\n        //% block=\"Turn servo2 left\"\n        BleServo2Left = 16,    /**< servo2 turn left */\n    };\n    const MOTOR_0 = 0\n    const SPEED_0 = 1\n    const MOTOR_1 = 2\n    const SPEED_1 = 3\n\n    const RGB_L = 11\n    const RGB_R = 12\n    const RGB_BLINK_NUM_L = 13\n    const RGB_BLINK_GRADE_L = 14\n    const RGB_BLINK_NUM_R = 15\n    const RGB_BLINK_GRADE_R = 16\n    const RGB_GRADUAL_CHANGE_GRADE_L = 17\n    const RGB_GRADUAL_CHANGE_GRADE_R = 18\n\n\n    const SERVO_1 = 20\n    const SERVO_2 = 21\n\n    const BLACK_ADC_STATE = 29\n    const ADC_COLLECT_0 = 30\n    const ADC_COLLECT_1 = 32\n    const ADC_COLLECT_2 = 34\n    const ADC_COLLECT_3 = 36\n    const ADC_COLLECT_4 = 38\n\n    const LIGHTL_H = 41\n    const LIGHTL_L = 42\n    const LIGHTR_H = 43\n    const LIGHTR_L = 44\n    const BATTERY_SET = 45\n    const BATTERY = 46\n    const MOTOR_TYPE_H = 47\n    const MOTOR_TYPE_L = 48\n    const VERSON_LEN = 50\n    const VERSON_DATA = 51\n    const MY_SYS_INIT = 70\n    const LINE_WALKING = 71\n    const LINE_SPEED_GRADE = 72\n    const CAR_STATE = 73\n    const CROSS_DEFAULT = 75\n    const T1_DEFAULT = 76\n    const T2_DEFAULT = 77\n    const T3_DEFAULT = 78\n    const BLECMD = 80\n    const BLEEN = 81\n    /**\n     *  Init I2C until success\n    */\n    //% weight=255\n    //% blockId=I2CInit block=\"initialize via I2C until success\"\n    //%group=\"Maqueen_v5\"\n    export function I2CInit(): void {\n        let versionLen = 0;\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = 0x46;\n        allBuffer[1] = 1;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer); //V5 systemInit\n        basic.pause(100);//waiting  reset\n\n        pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n        versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        while (versionLen == 0) {\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `, 10)\n            basic.pause(500)\n            basic.clearScreen()\n            pins.i2cWriteNumber(I2CADDR, 0x32, NumberFormat.Int8LE);\n            versionLen = pins.i2cReadNumber(I2CADDR, NumberFormat.Int8LE);\n        }\n        basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `, 10)\n        basic.pause(500)\n        basic.clearScreen()\n    }\n\n    function I2CWirte(Reg: number, data: number) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = Reg;\n        allBuffer[1] = data;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Start or close the line patrol\n     * @param patrol to patrol\n     */\n    //% weight=253\n    //% blockId=patrolling block=\"Line patrolling| %Patrolling\"\n    //% group=\"Maqueen_v5\"\n    export function patrolling(patrol: Patrolling) {\n        let allBuffer = pins.createBuffer(2);\n        if (patrol == Patrolling.ON)\n            allBuffer[1] = 1\n        else\n            allBuffer[1] = 0;\n        allBuffer[0] = LINE_WALKING;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    /**\n     * Set the tracking speed\n     * @param speed of Line patrol\n    //% weight=254\n    //% blockId=patrolSpeed block=\"set the speed of Line patrol| %PatrolSpeed\"\n    //% group=\"Maqueen_v5\"\n    export function patrolSpeed(speed: PatrolSpeed) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = LINE_SPEED_GRADE;\n        allBuffer[1] = speed;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n    }\n    */\n\n\n    /**\n     * Control motor module running\n     * @param index Motor selection enumeration\n     * @param direction Motor direction selection enumeration\n     * @param speed Motor speed control, eg:100\n     */\n    //% weight=252\n    //% blockId= V5_motor block=\"motor|%index|move|%Dir|at speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorRun(index: Motors, direction: Dir, speed: number): void {\n        let buf = pins.createBuffer(3);\n        if (index == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n        if (index == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = direction;\n            buf[2] = speed;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(MOTER_ADDRESSS, buf);\n        }\n    }\n\n    /**\n     * Read the version number.\n     */\n\n    //% weight=1\n    //% blockId=readVersion block=\"get product information\"\n    //% group=\"Maqueen_v5\"\n    export function readVersion(): string {\n        pins.i2cWriteNumber(I2CADDR, 50, NumberFormat.UInt8BE);\n        let dataLen = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(I2CADDR, 51, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2CADDR, dataLen, false);\n        let version = \"\";\n        for (let index = 0; index < dataLen; index++) {\n            version += String.fromCharCode(buf[index])\n        }\n        return version\n    }\n\n    let state1 = 0;\n\n    /**\n     * Read ultrasonic sensor（uint cm）.\n     */\n\n    //% blockId=V5_ultrasonic_sensor block=\"read ultrasonic sensor\"\n    //% weight=95\n    //% group=\"Maqueen_v5\"\n    export function Ultrasonic(): number {\n        let data;\n        let i = 0;\n        data = readUlt(PingUnit.Centimeters);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(PingUnit.Centimeters);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500\n        return data;\n\n    }\n    function readUlt(unit: number): number {\n        let d\n        pins.digitalWritePin(DigitalPin.P1, 1);\n        basic.pause(1)\n        pins.digitalWritePin(DigitalPin.P1, 0);\n        if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.High, 500 * 58);//readPulseIn(1);\n        } else {\n            pins.digitalWritePin(DigitalPin.P1, 1);\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            basic.pause(20)\n            pins.digitalWritePin(DigitalPin.P1, 0);\n            d = pins.pulseIn(DigitalPin.P2, PulseValue.Low, 500 * 58);//readPulseIn(0);\n        }\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            default: return Math.idiv(d, 2.54);\n        }\n    }\n\n    /**\n     * Control the motor module to stop running\n     * @param motors Motor selection enumeration\n     */\n\n    //% weight=240\n    //% blockId=V5_motorStop block=\"motor |%motors stop\"\n    //% motors.fieldEditor=\"gridpicker\" motors.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function motorStop(motors: Motors): void {\n        let buf = pins.createBuffer(3);\n        if (motors == 0) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n        if (motors == 1) {\n            buf[0] = MOTOR_1;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n        if (motors == 2) {\n            buf[0] = MOTOR_0;\n            buf[1] = 0;\n            buf[2] = 0;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n            buf[0] = MOTOR_1;\n            pins.i2cWriteBuffer(I2CADDR, buf);\n        }\n\n    }\n    /**\n     * Get the state of the patrol sensor. placing the cart on white paper returns 0 and placing the cart on air/black paper returns 1\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=20\n    //% blockId=readPatrol block=\"read line sensor |%Patrol  state\"\n    //% group=\"Maqueen_v5\"\n\n    export function readPatrol(patrol: Patrol): number {\n        pins.i2cWriteNumber(I2CADDR, BLACK_ADC_STATE, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadNumber(I2CADDR, NumberFormat.UInt8BE, false);\n        if (buf & (1 << (3 - patrol)))\n            return 1;\n        else\n            return 0;\n    }\n\n    /**\n     * The ADC data of the patrol sensor is obtained\n     * @param patrol Select the inspection sensor enumeration\n     */\n    //% weight=21\n    //% blockId= readPatrolData block=\"read line sensor |%Patrol  ADC data\"\n    //% patrol.fieldEditor=\"gridpicker\" patrol.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function readPatrolData(patrol: Patrol): number {\n        let data;\n        switch (patrol) {\n            case Patrol.L:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_1, NumberFormat.Int8LE);\n                let adc0Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc0Buffer[0] << 8 | adc0Buffer[1]\n                break;\n            case Patrol.M:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_2, NumberFormat.Int8LE);\n                let adc1Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc1Buffer[0] << 8 | adc1Buffer[1];\n                break;\n            case Patrol.R:\n                pins.i2cWriteNumber(I2CADDR, ADC_COLLECT_3, NumberFormat.Int8LE);\n                let adc2Buffer = pins.i2cReadBuffer(I2CADDR, 2);\n                data = adc2Buffer[0] << 8 | adc2Buffer[1];\n                break;\n\n            default:\n                data = 0;\n                break;\n\n        }\n        return data;\n    }\n\n    /**\n     * Control the Maqueen steering Angle(0-180)\n     * @param eline Select the inspection sensor enumeration\n     */\n\n    //% weight=90\n    //% blockId=V5_Servo block=\"servo|%index|angle|%angle\"\n    //% angle.min=0 angle.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% group=\"Maqueen_v5\"\n    export function servoRun(index: Servos, angle: number): void {\n        let buf = pins.createBuffer(2);\n        if (index == 0) {\n            buf[0] = SERVO_1;\n        }\n        if (index == 1) {\n            buf[0] = SERVO_2;\n        }\n        buf[1] = angle;\n        pins.i2cWriteBuffer(I2CADDR, buf);\n    }\n\n    /**\n     * Sets the color of the RGB lamp\n     * @param type to type\n     * @param rgb to rgb\n     */\n\n    //% block=\"RGB Car Lights %type color %rgb\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgblLed(type: DirectionType, rgb: CarLightColors) {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[1] = rgb;\n        if (type == DirectionType.Left) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.Right) {\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        } else if (type == DirectionType.All) {\n            allBuffer[0] = RGB_L;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n            allBuffer[0] = RGB_R;\n            pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        }\n    }\n    /**\n     * Set RGB lights to flash\n     * @param type to type\n     * @param num of flashes\n     * @param grade Select the speed level enumeration\n     * @param rgb Select color\n     */\n    //% inlineInputMode=inline\n    //% block=\"RGB Car Lights |%type Number of flashes |%number Level of flashes |%SpeedGrade color |%rgb\"\n    //% weight=11\n    //% num.min=0 num.max=255\n    //% group=\"Maqueen_v5\"\n    export function setRgbBlink(type: DirectionType, num: number, grade: SpeedGrade, rgb: CarLightColors) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        } else if (type == DirectionType.All) {\n            I2CWirte(RGB_L, rgb);\n            I2CWirte(RGB_BLINK_GRADE_L, grade);\n            I2CWirte(RGB_BLINK_NUM_L, num);\n            I2CWirte(RGB_R, rgb);\n            I2CWirte(RGB_BLINK_GRADE_R, grade);\n            I2CWirte(RGB_BLINK_NUM_R, num);\n        }\n    }\n\n    /**\n     * Set the RGB light gradient\n     * @param type to type\n     * @param grade Select the speed level enumeration\n     */\n    //% block=\"RGB Car Lights |%type Level of change |%SpeedGrade\"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbchange(type: DirectionType, grade: SpeedGrade) {\n        if (type == DirectionType.Left) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n        } else if (type == DirectionType.Right) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n        else if (type == DirectionType.All) {\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_L, grade);\n            I2CWirte(RGB_GRADUAL_CHANGE_GRADE_R, grade);\n        }\n    }\n    /**\n     * Turn off all RGB\n     * @param type to type\n     */\n    //% block=\"Close |%type RGB Car Lights  \"\n    //% weight=11\n    //% group=\"Maqueen_v5\"\n    export function setRgbOff(type: DirectionType) {\n        setRgblLed(type, CarLightColors.Black);\n    }\n    /**\n     * Reading light intensity(0-1023)\n     */\n    //% block=\"Read Light Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function readLightIntensity(type: DirectionType2): number {\n        let allBuffer = pins.createBuffer(2);\n        if (type == DirectionType2.Left) {\n            pins.i2cWriteNumber(I2CADDR, LIGHTL_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        } else {\n            pins.i2cWriteNumber(I2CADDR, LIGHTR_H, NumberFormat.Int8LE);\n            allBuffer = pins.i2cReadBuffer(I2CADDR, 2);\n            return allBuffer[0] << 8 | allBuffer[1];\n        }\n\n    }\n    /**\n     * Getting battery level(0-100)\n     * @param type Battery type\n     */\n    //% block=\"Read battery Values %type\"\n    //% weight=16\n    //% group=\"Maqueen_v5\"\n    export function getBatteryData(type: BatteryType = BatteryType.Alkaline): number {\n        let allBuffer = pins.createBuffer(2);\n        allBuffer[0] = BATTERY_SET;\n        allBuffer[1] = type;\n        pins.i2cWriteBuffer(I2CADDR, allBuffer)\n        basic.pause(50);\n        pins.i2cWriteNumber(I2CADDR, BATTERY, NumberFormat.Int8LE);\n        allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n        let temp_data = allBuffer[0];\n        if (temp_data > 100) temp_data = 100;\n        return temp_data;\n    }\n    // // /**\n    // //  *  Enable or disable BLE\n    // //  */\n    // // //% block=\"Bluetooth of Maqueen_v5  %cmd\"\n    // // //% weight=5\n    // // //% group=\"Maqueen_v5\"\n    // export function BleModule(cmd: Patrolling) {\n    //     let allBuffer = pins.createBuffer(2);\n    //     allBuffer[0] = BLEEN;\n    //     allBuffer[1] = cmd;\n    //     pins.i2cWriteBuffer(I2CADDR, allBuffer);\n    // }\n    // /**\n    //  *  Bluetooth of Maqueen V5 commands control the configuration by default\n    //  * @param Received Bluetooth command\n    //  */\n    // //% block=\"Maqueen_v5 Default Bluetooth command control %cmd\"\n    // //% weight=1\n    // //% group=\"Maqueen_v5\"\n    // export function BleCmdDefault(cmd: number){\n    //     switch (cmd) {\n    //         case BleCmd.BleForward:\n    //             motorRun(Motors.All, Dir.CW,100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CW, 0);\n    //             break;\n    //         case BleCmd.BleBackward:\n    //             motorRun(Motors.All, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleLeft:\n    //             motorRun(Motors.M2, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRight:\n    //             motorRun(Motors.M1, Dir.CCW, 100);\n    //             basic.pause(100);\n    //             motorRun(Motors.All, Dir.CCW, 0);\n    //             break;\n    //         case BleCmd.BleRgbR:\n    //             setRgblLed(DirectionType.All, CarLightColors.Red);\n    //             break;\n    //         case BleCmd.BleRgbG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Green);\n    //             break;\n    //         case BleCmd.BleRgbB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Blue);\n    //             break;\n    //         case BleCmd.BleRgbRB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Purple);\n    //             break;\n    //         case BleCmd.BleRgbRG:\n    //             setRgblLed(DirectionType.All, CarLightColors.Yellow);\n    //             break;\n    //         case BleCmd.BleRgbGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.Cyan);\n    //             break;\n    //         case BleCmd.BleRgbRGB:\n    //             setRgblLed(DirectionType.All, CarLightColors.White);\n    //             break;\n    //         case BleCmd.BleRgbOff:\n    //             setRgblLed(DirectionType.All, CarLightColors.Black);\n    //             break;\n    //         case BleCmd.BleServo1Right:\n    //             if (servo1_num < 180) servo1_num += 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo1Left:\n    //             if (servo1_num > 0) servo1_num -= 5;\n    //             servoRun(Servos.S1, servo1_num);\n    //             break;\n    //         case BleCmd.BleServo2Right:\n    //             if (servo2_num <= 180) servo2_num += 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         case BleCmd.BleServo2Left:\n    //             if (servo2_num > 0) servo2_num -= 5;\n    //             servoRun(Servos.S2, servo2_num);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n\n    // }\n\n    // /**\n    //  * Get commands from Bluetooth of Maqueen V5\n    //  */\n    // let Ble_state: number;\n    // let Ble_cmd: number;\n    // //% block=\"get Bluetooth commands\"\n    // //% weight=3\n    //  //% group=\"Maqueen_v5\"\n    // export function BleGetCmd(): number {\n    //     let allBuffer = pins.createBuffer(2);\n    //     pins.i2cWriteNumber(I2CADDR, BLECMD, NumberFormat.Int8LE);\n    //     allBuffer = pins.i2cReadBuffer(I2CADDR, 1);\n    //     let temp_data = allBuffer[0];\n    //     return temp_data;\n    // }\n    // /**\n    //  * When Bluetooth data from Maqueen V5 is received\n    //  * @param value describe value here, eg: 5\n    //  */\n    // //% weight=2\n    // //% block=\"When received\"\n    // //% draggableParameters\n    // //% group=\"Maqueen_v5\"\n    // export function BlecallbackUser(cb: (Blecmd: number) => void) {\n    //     Ble_state = 1;\n    //     control.onEvent(33, 44, function () {\n    //         cb(Ble_cmd)\n    //     })\n    // }\n\n    // basic.forever(() => {\n    //     if (Ble_state == 1) {\n    //         Ble_cmd = BleGetCmd();\n    //         if (Ble_cmd != 0) {\n    //             control.raiseEvent(33, 44)\n    //         }\n    //     }\n    //     basic.pause(50);\n    // })\n\n\n}\n\n","pxt.json":"{\n    \"name\": \"roo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"sadasd.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1760512295711}